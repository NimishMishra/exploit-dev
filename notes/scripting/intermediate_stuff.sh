#! /bin/bash

sample_array=(1 2 3 4 5 6)
echo ${sample_array[2]}
echo ${!sample_array[@]} # prints the indices
echo ${#sample_array[@]} # number of values
unset sample_array[2]    # will remove the give subset
echo ${sample_array[@]} 


function func()
{
	arg1=$1
	arg2=$2
	echo $arg1
	echo "This does something I guess..."
	echo $arg2
	
}

func "Hi" "Bye"
###### some short scoping rules

function update_var(){
	echo $1
	randomvar="updated random" # this is actually weird. bash doesn't seem to have scope rules at all
}

randomvar="random"
update_var $randomvar
echo $randomvar

######### creating dir

function create_dir(){
	if [ ! -d $1 ] # checks for existence
	then
		mkdir $1
		rm -rf $1
	else
		echo "Directory already exists."
	fi
}

#echo -n "Enter dir name: "
#read dirname
#create_dir $dirname


############ file checks


function filecheck(){
	echo -n "Enter filename to check: "
	read filename

	if [[ -f $filename ]] # dir was within single square brackets. [[]] needed for file
	then
		echo "filename exists"
	else
		touch $filename
	fi
}

#filecheck

########## read from a file

function fileread(){
	echo -n "Enter the name of the file to read from: "
	read filename

	while read -r line   # [] usually means some kind of expression. So it would expect a binary operator
	do
		echo $line
	done < $filename
}

#fileread

########## select and switch case

function select_loop(){
# it be a new kind of loop
	select os in unix windows linux
	do
		echo -n "Your reply is $REPLY: "
		case $os in
		unix)
			echo "unix";;
		windows)
			echo "windows";;
		linux)
			echo "linux";;
		*)  echo "error";;
		esac
	done
}

#select_loop


######## bash tests

function tests(){
	echo "Doing some simple tests"
	string="hi"
	if [[ -n $string ]]
	then
		echo "[TEST] String is non-empty"
	fi

	string1=""
	if [[ -z string1 ]]
	then
		echo "[TEST] Empty string test"
	fi

	# Other tests:
	# -e : file exists
	# -f : regular file
	# -d : d is a directory
	# -t : file descriptor is open

}

# tests

function grep_stuff(){

	sudo grep -iw "user" /etc/passwd # search for a substring in the given file
}
grep_stuff

# grep_stff

# sed: text stream editor (go line by line and do operations on the same)