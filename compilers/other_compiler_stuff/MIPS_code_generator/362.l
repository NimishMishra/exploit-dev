%{
    #include "362.tab.h"
    #include <stdlib.h>
    #include <stdio.h>
    int lineNum = 0;

%}

%option yylineno
%option noyywrap
white [ \t]+
digit [0-9]
integer {digit}+
exponent [eE][+-]?{integer}
real {integer}("."{integer})?{exponent}?
 
%%

"//".*\n {}
[ \t\n] {}
{white} {}
{integer} {
    yylval.integer_value = atoi(yytext);
    return IC;
}
{real} {
    return FC;
}

"if" {return KEYWORD_IF;}
"else" {return KEYWORD_ELSE;}
"printf" {return KEYWORD_PRINT;}
"int" {return INT;}
"real" {return REAL;}
"float" {return REAL;}
"for"   {return FOR;}
"while" {return WHILE;}
"do" {return KEYWORD_DO;}
"," {return COMMA;}
[a-zA-Z][a-zA-Z0-9]* { 
                        yylval.id = (char *) strdup(yytext);
                        return ID;}
";" {return SEMICOLON;}
"=" {return EQUAL;}
"|" {return OR;}
"!" {return NOT;}
"(" {return LEFT_PARAN;}
")" {return RIGHT_PARAN;}
"{" {return LEFT_CURLY;}
"}" {return RIGHT_CURLY;}
"==" {return DOUBLE_EQUAL;}
"<" {return LESS_THAN;}
">" {return GREATER_THAN;}
"&" {return AND;}
"+" {return ADD;}
"-" {return SUB;}
"*" {return MUL;}
"/" {return DIVIDE;}
"\""[a-zA-Z]*"\"" {return STR;}
. {printf("Lexical error");}
%%