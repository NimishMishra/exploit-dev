%{
	#include <stdio.h>
	#include <stdlib.h>
	#include <math.h>
	extern int yylineno;
	extern FILE* yyin;
	extern int yylex();	
	int yyerror(char* s){
	        printf("Error: %s at line number %d\n", s, yylineno);
}

%}

%union{
	char* id;
	char* string_literal;
	int integer_value;
	double real_value;
	int other_token_int;
}

%token	<integer_value> 	INTEGER_CONSTANT
%token	<real_value> 		REAL_CONSTANT
%token	<other_token_int> 	KEYWORD_IF
%token  <other_token_int>	KEYWORD_ELSE
%token  <other_token_int>	KEYWORD_PRINTF
%token  <other_token_int>	KEYWORD_DTYPE_INT
%token  <other_token_int>	KEYWORD_DTYPE_DOUBLE
%token  <other_token_int>	KEYWORD_DTYPE_FLOAT
%token  <other_token_int>	KEYWORD_FOR
%token  <other_token_int>	KEYWORD_WHILE
%token  <other_token_int>	KEYWORD_DO
%token  <other_token_int>	SEPARATOR_COMMA
%token  <ID>			IDENTIFIER
%token  <other_token_int>	SEPARATOR_SEMICOLON
%token  <other_token_int>	OPERATOR_EQUAL
%token  <other_token_int>	OPERATOR_OR
%token  <other_token_int>	OPERATOR_NOT
%token  <other_token_int>	LEFT_PARAN
%token  <other_token_int>	RIGHT_PARAN
%token  <other_token_int>	LEFT_CURLY
%token  <other_token_int>	RIGHT_CURLY
%token  <other_token_int>	OPERATOR_DOUBLE_EQUAL
%token  <other_token_int>	OPERATOR_LESS_THAN
%token  <other_token_int>	OPERATOR_GREATER_THAN
%token  <other_token_int>	OPERATOR_AND
%token  <other_token_int>	OPERATOR_SUB
%token  <other_token_int>	OPERATOR_MULTIPLY
%token  <other_token_int>	OPERATOR_DIVIDE
%token  <string_literal>	STRING


%left OPERATOR_AND
%left OPERATOR_OR
%left OPERATOR_SUB OPERATOR_ADD
%left OPERATOR_NOT

%start BEGIN

%%

BEGIN: BEGIN IF_BLOCK 		{}
	| BEGIN WHILE_BLOCK 	{}
	| BEGIN DO_WHILE_BLOCK	{}
	| BEGIN FOR_BLOCK	{}
	| BEGIN STATEMENT_LIST	{}	
	| 			{}
;

DO_WHILE_BLOCK: STATEMENT_LIST KEYWORD_DO LEFT_CURLY STATEMENT_LIST RIGHT_CURLY KEYWORD_WHILE LEFT_PARAN LOOP_BE RIGHT_PARAN SEPARATOR_SEMICOLON {}
;

WHILE_BLOCK:	STATEMENT_LIST KEYWORD_WHILE LEFT_PARAN LOOP_BE RIGHT_PARAN LEFT_CURLY STATEMENT_LIST RIGHT_CURLY {}

;

FOR_BLOCK:	STATEMENT_LIST KEYWORD_FOR LEFT_PARAN FOR_ASSIGN SEPARATOR_SEMICOLON LOOP_BE SEPARATOR_SEMICOLON FOR_UPDATE RIGHT_PARAN LEFT_CURLY STATEMENT_LIST RIGHT_CURLY	{}
;

FOR_ASSIGN:	FOR_ASSIGN SEPARATOR_COMMA FOR_ASSIGN_STATEMENT	{}
		| FOR_ASSIGN_STATEMENT	{}
;

FOR_ASSIGN_STATEMENT:	IDENTIFIER OPERATOR_EQUAL INTEGER_CONSTANT	{}
		| 	DATATYPE IDENTIFIER OPERATOR_EQUAL INTEGER_CONSTANT {}
;

FOR_UPDATE:	FOR_UPDATE SEPARATOR_COMMA FOR_UPDATE_STATEMENT	{}
		| FOR_UPDATE_STATEMENT	{}
;

FOR_UPDATE_STATEMENT:	IDENTIFIER OPERATOR_ADD OPERATOR_EQUAL INTEGER_CONSTANT	{}
			| IDENTIFIER OPERATOR_SUB OPERATOR_EQUAL INTEGER_CONSTANT {}
			| IDENTIFIER OPERATOR_MULTIPLY OPERATOR_EQUAL INTEGER_CONSTANT {}
			| IDENTIFIER OPERATOR_DIVIDE OPERATOR_EQUAL INTEGER_CONSTANT {}
			| {}
;

IF_BLOCK:	KEYWORD_IF LEFT_PARAN BE RIGHT_PARAN LEFT_CURLY STATEMENT_LIST RIGHT_CURLY	{}
	|	KEYWORD_IF LEFT_PARAN BE RIGHT_PARAN LEFT_CURLY STATEMENT_LIST RIGHT_CURLY KEYWORD_ELSE LEFT_CURLY STATEMENT_LIST RIGHT_CURLY {}
	|	KEYWORD_IF LEFT_PARAN BE RIGHT_PARAN STATEMENT	{}
	|	KEYWORD_IF LEFT_PARAN BE RIGHT_PARAN STATEMENT KEYWORD_ELSE STATEMENT	{}
	|	KEYWORD_IF LEFT_PARAN BE RIGHT_PARAN LEFT_CURLY STATEMENT_LIST RIGHT_CURLY KEYWORD_ELSE STATEMENT {}
	|	KEYWORD_IF LEFT_PARAN BE RIGHT_PARAN LEFT_CURLY BEGIN RIGHT_CURLY {}
	|	KEYWORD_IF LEFT_PARAN BE RIGHT_PARAN LEFT_CURLY BEGIN RIGHT_CURLY KEYWORD_ELSE LEFT_CURLY STATEMENT_LIST RIGHT_CURLY {}
;

STATEMENT_LIST:	STATEMENT_LIST STATEMENT 	{}
	|	STATEMENT {}
;

STATEMENT:	EXPRESSION OPERATOR_EQUAL EXPRESSION SEPARATOR_SEMICOLON	{}
		| DATATYPE EXPRESSION OPERATOR_EQUAL EXPRESSION SEPARATOR_SEMICOLON {}
;

DATATYPE: KEYWORD_DTYPE_INT {}
	| KEYWORD_DTYPE_FLOAT {}
	| KEYWORD_DTYPE_DOUBLE {}
;

LOOP_BE:	LOOP_BE OPERATOR_OR LOOP_BE	{}
	|	LOOP_BE OPERATOR_AND LOOP_BE	{}
	|	OPERATOR_NOT LOOP_BE		{}
	|	LEFT_PARAN LOOP_BE RIGHT_PARAN  {}
	|	LOOP_RE				{}
;


LOOP_RE:	EXPRESSION OPERATOR_DOUBLE_EQUAL EXPRESSION {}
	|	EXPRESSION OPERATOR_LESS_THAN EXPRESSION	{}
	|	EXPRESSION OPERATOR_GREATER_THAN EXPRESSION	{}
;

BE:	BE OPERATOR_OR BE	{}
	| BE OPERATOR_AND BE	{}
	| OPERATOR_NOT BE	{}
	| LEFT_PARAN BE RIGHT_PARAN {}
	| LOOP_BE	{}
;

EXPRESSION:	IDENTIFIER {}
	|	INTEGER_CONSTANT	{}
	| 	REAL_CONSTANT		{}
	|	EXPRESSION OPERATOR_ADD EXPRESSION {}
	| 	EXPRESSION OPERATOR_SUB EXPRESSION {}
	|	EXPRESSION OPERATOR_MULTIPLY EXPRESSION {}
	|	EXPRESSION OPERATOR_DIVIDE EXPRESSION {}
	|	OPERATOR_SUB	EXPRESSION		{}
	|	LEFT_PARAN EXPRESSION RIGHT_PARAN	{}
;

%%


int main(){
	yyin = fopen("program.c", "r");
	if(yyparse()){
		printf("Erroraneous code. Frontend exited");
	}
}
