#include <iostream>
#include <cstddef>
using namespace std;


void int_pointers(){

    int* sample_int_pointer;
    sample_int_pointer = new int(1024); // an obscure way of getting a pointer
    cout << *sample_int_pointer << " stored at " << sample_int_pointer <<  endl;
    if(sample_int_pointer){
        delete(sample_int_pointer);
        cout << "deleted\n";
    }

    int* sample_int_array = new int[5];
    for(int i = 0; i < 5; i++){
        *(sample_int_array + i) = i+3;
        cout << *(sample_int_array + i) << " ";
    }
    cout << endl;
    if(sample_int_array){
        delete [] sample_int_array;
    }
}

void multi_level_dereferencing(){
	int a = 5;
	int* b = &a;
	int** c = &b;

	cout << a << " " << *b << " " << **c << endl;
}

void pointer_to_const(){
	const int val = 20;
	try{
		// Compiler refuses to do this
		//int* p = &val;

		const int* p = &val;
		int val2 = 21;
		cout << *p << " ";
		p = &val2;
		cout << *p << " \n";
		cout << "end of try" << endl;
	}

	catch(...){
		cout << "Pointers to const value not alowed" << endl;
	}
}

void constant_pointers(){
	int a = 20;
	int b = 21;
	int* const pointer = &a;
	cout << *pointer << " " << endl;
	// pointer = &b; // throws a compile time error
}

void reference_basics(){
	int val = 20;
	int& ref = val;
	//int& ref2; // error. it must be initializedb

	cout << ref << " " << endl; // use it without anything
}

void reference_vs_pointer(){
	int* p = NULL;
	try{
		*p = 1;
	}

	catch(...){
		cout << "Segmentation fault\n";
	}

	const int& val = 0;
	cout << val << " ";
	//val = 2; // compile time error
	cout << val << "\n";
}

void handle_command_line_arguments(int argc, char* argv[]){
	int index = 0;
	while(index < argc){
		cout << argv[index]  << " " << endl;
		index++;
	}
}
// function pointers

inline int add(int a, int b){
	return a + b;
}

inline int sub(int a, int b){
	return a-b;
}

void main_function(int (*func)(int, int)){
	
	// call the function
	int result = func(1, 2);
	cout << "[RESULT] " << result << endl;
}

////////////////////////

int main(int argc, char* argv[]){
	handle_command_line_arguments(argc, argv);
	main_function(add);
	main_function(sub);
}
